




gdfdfds
std::string getDestinationHostGateByMessage(cMessage *msg)
{
    std::string desgate="in1";
    std::string messagename = msg->getName();
    char lastChar = messagename.back();
        if (lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == '0') {
               desgate="in2";
          }
   return desgate ;
}

const char* FogNode::getGateName(cMessage *msg)
{
    const     char* arrivalGate = msg->getArrivalGate()->getName();
    return arrivalGate;
    Display(msg, (std::string("arrival gate is ") + arrivalGate).c_str());

}



    if (getGateName(msg) == Host1Gate|| getGateName(msg) == Host2Gate) {// from hosts
        send(msg, ServerGate);
    }
    else if (getGateName(msg) == ServerGate) {   //from server

        send(msg, getDestinationHostGateByMessage(msg));
    }
    
    
    
    
    
    
    
    //////////////
    
    //    submodules:
//        queue: MyQueue;
//
//
//connections allowunconnected:
//    in1 --> queue.in1;
//    in2 --> queue.in2;
//    in3 --> queue.in3;
//    in4 --> queue.in4;
//    in5 --> queue.in5;
//
//    queue.out1 --> out1;
//    queue.out2 --> out2;
//    queue.out3 --> out3;
//    queue.out4 --> out4;
//    queue.out5 --> out5;

//////////////////
